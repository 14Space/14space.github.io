// js/lesson.js

// –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤–µ—Å—å –∫–æ–¥ –≤ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
document.addEventListener('DOMContentLoaded', function() {
  // ====== –∫—Ä–∞—Ç–∫–∏–µ —É—Ç–∏–ª–∏—Ç—ã ======
  const $ = (sel) => document.querySelector(sel);
  const params = new URLSearchParams(location.search);
  const lessonId = params.get('lesson') || 'italian';

  const titleEl = $('#lesson-title');
  const explainEl = $('#explain');
  const statusEl = $('#status');
  const btnReset = $('#btn-reset');
  const btnHint = $('#btn-hint');
  const btnPractice = $('#btn-practice');

  // ====== —Å–æ—Å—Ç–æ—è–Ω–∏–µ ======
  let LESSON = null;
  let stepIndex = 0;
  let inPractice = false;
  let game = new Chess();
  let board = null;

  // ====== —Ä–∏—Å—É–µ–º –¥–æ—Å–∫—É ======
  // –¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è, –∫–æ–≥–¥–∞ #board —Ç–æ—á–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  board = Chessboard('board', {
    draggable: true,
    position: 'start',
    onDragStart,
    onDrop,
    onSnapEnd: () => board.position(game.fen())
  });

  renderStatus('–û–∂–∏–¥–∞—é –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞‚Ä¶');

  // ====== –≥—Ä—É–∑–∏–º JSON —É—Ä–æ–∫–∞ ======
  fetch(`lessons/${lessonId}.json`)
    .then(r => r.ok ? r.json() : Promise.reject(new Error('–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —É—Ä–æ–∫–∞')))
    .then(initLesson)
    .catch((e) => {
      explainEl.innerHTML = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–∞. –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª <code>lessons/' + lessonId + '.json</code>.';
      renderStatus(String(e), false);
    });

  // ====== –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Ä–æ–∫–∞ ======
  function initLesson(data) {
    LESSON = data;
    titleEl.textContent = data.title || '–£—Ä–æ–∫';
    stepIndex = 0;
    inPractice = false;
    btnPractice.disabled = true;

    game.reset();
    if (data.startingFEN && data.startingFEN !== 'start') game.load(data.startingFEN);
    board.position(game.fen());

    renderExplain();
    renderStatus('–£—Ä–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω. –°–¥–µ–ª–∞–π –ø–µ—Ä–≤—ã–π —Ö–æ–¥.');
  }

  // ====== callbacks –¥–æ—Å–∫–∏ ======
  function onDragStart(source, piece) {
    const turn = game.turn();
    if (turn === 'w' && piece.startsWith('b')) return false;
    if (turn === 'b' && piece.startsWith('w')) return false;

    if (!inPractice && LESSON) {
      const step = LESSON.sequence[stepIndex];
      if (!step || !step.move) return false;
    }
  }

  function onDrop(source, target) {
    const move = game.move({ from: source, to: target, promotion: 'q' });
    if (!move) return 'snapback';

    if (!inPractice) {
      const step = LESSON?.sequence[stepIndex];
      if (!step || !step.move) {
        game.undo();
        return 'snapback';
      }
      if (move.san !== step.move) {
        game.undo();
        explainEl.innerHTML = step.hint
          ? `<b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> ${step.hint}`
          : `–ù–µ–≤–µ—Ä–Ω–æ. –ó–¥–µ—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ö–æ–¥ ‚Äî <b>${step.move}</b>.`;
        renderStatus(`–û–∂–∏–¥–∞–ª–æ—Å—å ${step.move}`, false);
        return 'snapback';
      }
      stepIndex++;
      renderStatus(`–í–µ—Ä–Ω–æ: ${move.san}`, true);
      renderExplain();
      setTimeout(playOpponentIfAny, 300);
      return;
    }

    const i = LESSON.practiceCursor;
    const expected = LESSON.practice.target[i];
    const shouldBeMyMove = i % 2 === 0;
    if (shouldBeMyMove && move.san !== expected) {
      game.undo();
      renderStatus(`–û–∂–∏–¥–∞–ª–æ—Å—å: ${expected}`, false);
      return 'snapback';
    }
    LESSON.practiceCursor++;
    renderStatus(`–•–æ–¥: ${move.san}`, true);
    setTimeout(playPracticeOpponent, 250);
  }

  function playOpponentIfAny() {
    const step = LESSON.sequence[stepIndex];
    if (step && step.opponent) {
      const mv = game.move(step.opponent);
      if (mv) {
        board.position(game.fen());
        renderStatus(`–°–æ–ø–µ—Ä–Ω–∏–∫: ${mv.san}`, true);
        stepIndex++;
        renderExplain();
      }
    }
    if (stepIndex >= LESSON.sequence.length) {
      btnPractice.disabled = false;
      renderStatus('–û—Å–Ω–æ–≤–Ω–∞—è –ª–∏–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏ ¬´–°—ã–≥—Ä–∞—Ç—å –±–µ–∑ –ø–æ–º–æ—â–∏¬ª.', true);
    }
  }

  function playPracticeOpponent() {
    const i = LESSON.practiceCursor;
    if (i < LESSON.practice.target.length && i % 2 === 1) {
      const mvSan = LESSON.practice.target[i];
      const mv = game.move(mvSan);
      if (mv) {
        LESSON.practiceCursor++;
        board.position(game.fen());
        renderStatus(`–°–æ–ø–µ—Ä–Ω–∏–∫: ${mv.san}`, true);
      }
      if (LESSON.practiceCursor >= LESSON.practice.target.length) {
        renderStatus('–ü—Ä–∞–∫—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ', true);
        explainEl.innerHTML = '–û—Ç–ª–∏—á–Ω–æ! –ú–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é.';
      }
    }
  }

  // ====== UI ======
  function renderExplain() {
    const step = LESSON.sequence[stepIndex];
    if (!step) {
      explainEl.innerHTML = '–û—Å–Ω–æ–≤–Ω–∞—è –ª–∏–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–∂–º–∏ ¬´–°—ã–≥—Ä–∞—Ç—å –±–µ–∑ –ø–æ–º–æ—â–∏¬ª.';
      return;
    }
    explainEl.innerHTML = step.explain || '–°–¥–µ–ª–∞–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ö–æ–¥.';
    board.position(game.fen());
  }

  function renderStatus(text, ok = null) {
    const li = document.createElement('li');
    li.textContent = text;
    if (ok === true) li.classList.add('ok');
    if (ok === false) li.classList.add('bad');
    statusEl.prepend(li);
  }

  // –∫–Ω–æ–ø–∫–∏
  btnReset.addEventListener('click', () => {
    if (!LESSON) return;
    inPractice = false;
    btnPractice.disabled = true;
    statusEl.innerHTML = '';
    game.reset();
    if (LESSON.startingFEN && LESSON.startingFEN !== 'start') game.load(LESSON.startingFEN);
    board.position(game.fen());
    stepIndex = 0;
    renderExplain();
    renderStatus('–ü–æ–∑–∏—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞.');
  });

  btnHint.addEventListener('click', () => {
    if (inPractice || !LESSON) return;
    const step = LESSON.sequence[stepIndex];
    if (step?.move) {
      explainEl.innerHTML = `<b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> –∏—â–µ–º —Ö–æ–¥ <code>${step.move}</code> ‚Äî –∏–¥–µ—è –æ–ø–∏—Å–∞–Ω–∞ –≤—ã—à–µ.`;
    }
  });

  btnPractice.addEventListener('click', () => {
    if (!LESSON) return;
    inPractice = true;
    statusEl.innerHTML = '';
    explainEl.innerHTML = '–ü—Ä–∞–∫—Ç–∏–∫–∞: –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–∏ –ª–∏–Ω–∏—é –±–µ–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫.';
    game.reset();
    if (LESSON.startingFEN && LESSON.startingFEN !== 'start') game.load(LESSON.startingFEN);
    board.position(game.fen());
    LESSON.practiceCursor = 0;
  });

}); // <-- –Ω–µ –∑–∞–±—É–¥—å –∑–∞–∫—Ä—ã—Ç—å —Å–∫–æ–±–∫—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞